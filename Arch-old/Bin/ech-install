#!/bin/sh
#\documentstyle{article}
#\begin{document}
#%
#%         ***********************************************
#%         *                                             *
#          \title{Ecc -- Driver for the eps compiler}
#%         *                                             *
#%         ***********************************************
#%
#\author{B\o rge Arntsen}
#\maketitle
#\tableofcontents
#\abstract{{\tt Ecc [-c -t -a -b -p -s -e -C -O -g] file}}
#
#%============================================================
#\section{Introduction}  
#%============================================================
# This is a script to drive the eps compiler.
# The script essentially sets up options for
# the C-compiler and arranges the eps source code
# to be pre-processed before input to the eps program
# itself.
# The driver accepts the following options
#\begin{itemize}
#  \item -c \\
#			Generate C-code, but do not invoke
#           the C compiler for compilation.
#  \item -t \\
#         Only parsing of the input source is performed,
#         and the output will be a text representation of
#         the internal abstract syntax tree. 
#         No type checking
#         is performed.
#  \item -a \\
#         Parsing and type checking is performed. The output
#         will be a text representation of the internal 
#         syntax tree. The tree is fully annotated.
#  \item -p
#         Parsing and type checking is performed. No output,
#         except from error messages.
#  \item -s
#         Print the symbol table.
#  \item -g
#         Generate debug information.
#  \item -O
#         Optimize the code.
#  \item -C
#         Perform run-time array index check.
#  \item -b
#         Split all expressions
#%============================================================
#\section{Configuration}
#%============================================================
#All variables have capital letters. The {\tt EC} variable
#is the name of the compiler itself, and should be set to
#a complete path name including the ec program itself.
#
#\subsection{Default configuration}
#
# The default configuration is to place the compiler
# binaries and include file in the source directory.
#\begin{verbatim}
#EC=./epsh  #Default location of eps binary
#INC=.     #Default location of system include files
#\end{verbatim}
#
#\subsection{Local configuration}
# 
# The following lines must be changed if the
# compiler binaries and include file are placed
# in a directory different from the source directory.
#\begin{verbatim}
#
#-----Change the two lines below-------------------
#
EC=$EPS/Bin/epsh #Location of eps binary
INC=$EPS/Inc    #Location of system include files
#
#-----Do not change below this line----------------
#
#\end{verbatim}
#%============================================================
#\section{The script}
#%============================================================
#The script is a simple driver for the eps compiler.
#The eps compiler binaries is called {\tt eps} and can be 
#invoked as a stand alone program:
#
#\begin{verbatim}
# eps [-a -t -p -e -s -C] < inputfile > output file
#\end{verbatim}
#
#The script first initializes several single letter variables.
#The single letter variables {\tt A,T,P,E,S} correspond
#to the options {\tt -a, -t, -p, -e, -s, } and {\tt -C}.
#The {\tt SP} variable contains only a single Space.
#\begin{verbatim}
  A=
  B= 
  T=
  P=
  E=-e 
  S=
  C=
  G=
  PG=
  CG=
  SP=" "
#
# Loop over all command line arguments
#
for i in $*
do
    case $i in
    -c)   
         CG=-c ;;
    -a)
         A=-a
         c= 
         CG=-c
         E= ;;
    -b)
         B=-b ;;
    -t)
         T=-t
         c= 
         CG=-c
         E= ;;
    -s)
         S=-s
         E=  
         CG=-c
         c= ;;
    -p)
         P=-p
         c= 
         CG=-c
         E= ;;
    -g)
         CG=-g
         G=-g;;    
    -pg)
         CG=-pg
         PG=-pg;;    
    -O)
         O=" -O ";;
    -O3)
         O=" -O3";;
    -C)
         C=-C;;

     *)   
         NCFLAGS=$A$SP$B$SP$T$SP$P$SP$E$SP$S$SP$C$SP$G
         SPECIAL=" -c " 
	 CCFLAGS=$O$SP$G$SP$PG$SP$SPECIAL
         name=`basename $i \.e`       
         of=$name\.cu
         if
             case $E in
             -e)
                 $EC $NCFLAGS  $i >$of ;;
              *)
                 $EC $NCFLAGS  $i ;; 
             esac
         then
             case $CG in
             -g)
                  hipcc $CCFLAGS $of ;; 
             -c)
                  ;; 
              *) 
                  hipcc $CCFLAGS $of 
                  rm $of ;;
             esac
         else
			echo "ec: error"
         fi;;
     esac
done 
#\end{verbatim}
#\end{document}
