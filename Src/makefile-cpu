## The eps compiler makefile

# This makefile creates and install the eps compiler.
# The main targets are:

# 1. eps - compiles the eps compiler
# 2. lib - compiles the eps library
# 3. install - installation of compiler 
# 4. genboot - Generate c-code for bootstrapping
# 5. boot    - Bootstrap from c-code
# 6. clean   - remove intermediate files
#    
# The compiler is self-hosting so the compiler binary eps is
# to be regarded as source code. Backup copy is found in
# ../Arch/Bin
#
## Definitions

# This section defines pathnames for the directories where
# the compiler driver (ec), compiler binary (eps), library 
# file (libecpu.a) , include file (libe.i) and loader 
# driver el are to be installed. 
    BIN=../Bin
    LIB=../Lib
    INC=../Inc
    ECFLAGS= -g
    CCFLAGS= -g
    LDFLAGS=

# The eps target
eps:    main.o scan.o parse.o ptree.o sem.o sym.o code-cpu.o \
        err.o scanpath.o libe.o runcpu.o	
		ar rcs libecpu.a libe.o runcpu.o
		./el $(LDFLAGS) -o eps main.o scan.o parse.o ptree.o sem.o code-cpu.o \
                                   sym.o err.o scanpath.o
main.o:      main.e 
		./ec $(ECFLAGS) main.e 
scan.o:      scan.e
		./ec $(ECFLAGS) scan.e 
scanpath.o:  scanpath.e
		./ec $(ECFLAGS) scanpath.e 
parse.o:     parse.e
		./ec $(ECFLAGS) parse.e 
ptree.o:     ptree.e
		./ec $(ECFLAGS) ptree.e 
sem.o:       sem.e
		./ec $(ECFLAGS) sem.e 
sym.o:       sym.e
		./ec $(ECFLAGS) sym.e 
code-cpu.o:  code-cpu.e
		./ec $(ECFLAGS) code-cpu.e 
err.o:		err.e
		./ec $(ECFLAGS) err.e 
# Libraries
lib:       libcpu.a 
libcpu.a:  libe.o runcpu.o
		ar rcs libecpu.a libe.o runcpu.o 
libe.o:    libe.e
		./ec -O $(ECFLAGS) libe.e 
runcpu.o:  runcpu.e
		cp runcpu.e runcpu.c
		gcc -c $(CCFLAGS) runcpu.c

# The install target
install: eps
	cp eps $(BIN)
	./ecedit.sh
	cp ec-install  $(BIN)/ec
	cp el-install  $(BIN)/el
	cp libecpu.a $(LIB)
	cp libe.i $(INC)

# The genboot target
genboot:	main.c scan.c scanpath.c parse.c ptree.c sem.c sym.c code-cpu.c    \
		err.c libe.c runcpu.c 
		cp main.c scan.c scanpath.c parse.c ptree.c sem.c sym.c code-cpu.c \
       		err.c libe.c runcpu.c ../Arch/Boot-cpu

main.c:     main.e 
		ec -c main.e
scan.c:     scan.e
		ec -c scan.e 
scanpath.c: scanpath.e
		ec -c scanpath.e 
parse.c:    parse.e
		ec -c parse.e 
ptree.c:    ptree.e
		ec -c ptree.e 
sem.c:	    sem.e
		ec -c sem.e 
sym.c:	    sym.e
		ec -c sym.e 
code-cpu.c: code-cpu.e
		ec -c code-cpu.e 
err.c:      err.e
		ec -c err.e 
libe.c:     libe.e
		ec -c libe.e 
runcpu.c:   runcpu.e
		cp runcpu.e runcpu.c

# The boot target
boot: 
	cp ../Arch/Boot-cpu/*.c .
	gcc -c *.c
	gcc -o eps -lm *.o

# The clean target
clean: 
	rm -f *.a *.o *.c *.cpp
