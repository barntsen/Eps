#!/bin/sh
# ec is the driver for the eps compiler.
#
# The script essentially sets up options for
# the eps compiler and the C-compiler.
# 
# All variables have capital letters. The EC variable
# is the name of the compiler itself, and should be set to
# a complete path name including the ec program itself.
#
# The default configuration is to place the compiler
# binaries and include file in the source directory.
# The following lines must be changed if the
# compiler binaries and include file are placed
# in a directory different from the source directory.
#
# Path names for binaries and include files
 LOCALBIN=./eps
 LOCALINC=.
 EPSBIN=$EPS/Bin/epsh
 EPSINC=$EPS/Inc

 EC=$LOCALBIN  #Location of eps binary
 INC=$LOCALINC #Location of system include files


# The script is a simple driver for the eps compiler.
# See the main.e source file for options to the eps compiler binary.
# The script first initializes several variables.
# The single letter variables H,A,T,P,E,S,N,M,C,F correspond
# to the options  -a, -t, -p, -e, -s, -nt, -nb, -f -C of the eps binary.
# The G variable is used to set the -g debug option of the C-compiler.
# The O variable controls the optimization option for the C compiler
# and the F variable controlls the openmp option for the C compiler.
# The CG variable controlls whether to invoke the C-compiler or not.
# The SP variable contains only a single Space.
# The H variable stores the -h option for printing help.
  H=                   
  A=                   
  T=
  P=
  E=-e 
  S=
  N="-nt 256"
  M="-nb 64000"
  C=
  G=
  CG=
  SP=" "
#
# Loop over all command line arguments
#
  while getopts "fOhcatspgCn:m:" arg; do
    case $arg in
      h)
        H=h;;

      c)   
        CG=-c ;;

      a)
        A=-a
        c= 
        CG=-c
        E= ;; 

      t)
        T=-t
        c= 
        CG=-c
        E= ;; 

      s)
        S=-s
        E=  
        CG=-c
        c= ;;

      p)
        P=-p
        c= 
        CG=-c
        E= ;;

      n)
        N="-nt "${OPTARG}
        ;;

      m)   
        M="-nb "${OPTARG}
        ;;
    
      g)
        CG=-g
        G=-g;;    
      f)
        F="-fopenmp" ;;

      O)
        O=" -O3 ";;

      C)
        C=-C;;
    esac
  done 

  case $H in h)
    echo "eps [-c -t -a -p -s -g -O -C -n -m -h] [file]"
    echo "-h : Show help"
    echo "-c : Invoke the eps compiler and generate c code" 
    echo "     but do not compile the c-code." 
    echo "-a : Output annotated parse tree on stdout with semantic check."
    echo "-t : Output parse tree on stdout, no semantic check"
    echo "-s : Dump symbol table, no code generated"
    echo "-p : Parsing and type checking performed, no code generated"
    echo "-n : No of threads"
    echo "-m : No of thread blocks"
    echo "-g : Generate debug information"
    echo "-f : Compile C-code with openmp"
    echo "-O : Optimize code"
    echo "-C : Perform run-time array bounds check"
   ;;
  esac


# Set the options for the eps compiler
  EFLAGS=$A$SP$T$SP$P$SP$E$SP$S$SP$C$SP$G$SP$N$SP$M

# Set the options for the C-compiler
  SPECIAL=" -c" 
  CCFLAGS=$O$SP$G$SP$F$SPECIAL

# Set input and output file names
  #get the last parameter (input file name)
  for i in $@; do :; done
  last=$i

  if [ ! -f "$last" ]; then
    echo "Missing file name or non-existent input file"
    exit
  fi

  name=`basename $last  \.e`       
  of=$name\.c

  if
    case $E in
      -e)                          #Generate c-code and store in file.
        $EC $EFLAGS  $last >$of ;;

       *)
        $EC $EFLAGS  $last ;;      # Run eps compiler but only outout 
    esac                           # to stdout (symbol table,parse tree,etc.)
  then
    case $CG in                    # Run C-compiler
      -g)
        hipcc $CCFLAGS $of ;;        #Compile with debug option set. Keep c-code.

      -c)
         ;;                        #Skip the C-compilation but keep c-code

      *)                           
        hipcc $CCFLAGS $of           #Run C-compiler then remove the input c-code. 
        rm $of ;;
    esac
  fi
